How did viewing a diff between two versions of a file help you see the bug that was introduced?

Using the diff command with the -u flag checks for differences between file A and file B and displays the differences so you can easily identify them.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

If you have old revisions you can easily take a step back if you messed something up or if you made some mistakes and botched your code.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Choosing when you do a commit lets you do as much or as little work before commiting, if you saved automatically you could end up with a non-working program.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

When you program sometimes you have multiple files that link to one file. Such as libraries and included files in C / C++

How can you use the commands git log and git diff to view the history of files?

git log - allows you to see all the different commits and their IDs

git diff - allows you to see the differences between commits

How might using version control make you more confident to make changes that could break something?

You can always check the differences between files and go back if you need to. It's like a time machine!!

Now that you have your workspace set up, what do you want to try using Git for?

I want to get programming!!! make a $$$$$$$


What happens when you initialize a repository? Why do you need to do it?

You tell git that you want to keep track of a certain directory and the changes made to the files inside it. You need to do it if you want to have version control.


